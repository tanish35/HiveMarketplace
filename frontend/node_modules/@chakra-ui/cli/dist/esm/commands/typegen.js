"use strict";
import * as p from '@clack/prompts';
import { Command } from 'commander';
import createDebug from 'debug';
import { writeFileSync } from 'fs';
import { resolve } from 'path';
import { generateCondition } from '../utils/generate-conditions.js';
import { generatePropTypes } from '../utils/generate-prop-types.js';
import { generateRecipe } from '../utils/generate-recipe.js';
import { generateSystemTypes } from '../utils/generate-system-types.js';
import { generateTokens } from '../utils/generate-tokens.js';
import { clean, read, watch, ensureDir, basePath, write } from '../utils/io.js';
import { tasks } from '../utils/tasks.js';

const debug = createDebug("chakra:typegen");
const TypegenCommand = new Command("typegen").argument("<source>", "path to the theme file").description("Generate theme and recipe typings").option("--strict", "Generate strict types for props variant and size").option("--watch [path]", "Watch directory for changes and rebuild").option("--clean", "Clean the output directory").action(async (source, flags) => {
  debug("source", source);
  debug("flags", flags);
  if (flags.clean) {
    debug("cleaning output directory");
    await clean();
  }
  let result = await read(source);
  if (process.env.DEBUG) {
    const configPath = resolve("chakra-config.json");
    debug("writing bundled source to", configPath);
    const config = result.mod._config;
    writeFileSync("chakra-config.json", JSON.stringify(config, null, 2));
  }
  const build = async () => {
    await codegen(result.mod, flags);
    if (flags.watch) {
      p.log.info("\n\u231B\uFE0F Watching for changes...");
    }
  };
  if (!flags.watch) {
    await build();
  } else {
    debug("watch dependencies", result.dependencies);
    watch(result.dependencies, async () => {
      result = await read(source);
      return build();
    });
  }
  p.outro("\u{1F389} Done!");
});
function codegen(sys, flags) {
  ensureDir(basePath);
  debug("writing codegen to", basePath);
  return tasks([
    {
      title: "Generating conditions types...",
      task: async () => {
        await write("conditions.gen", generateCondition(sys));
        return "\u2705 Generated conditions typings";
      }
    },
    {
      title: "Generating recipe types...",
      task: async () => {
        await write("recipes.gen", generateRecipe(sys, flags.strict));
        return "\u2705 Generated recipe typings";
      }
    },
    {
      title: "Generating utility types...",
      task: async () => {
        await write("prop-types.gen", generatePropTypes(sys));
        return "\u2705 Generated utility typings";
      }
    },
    {
      title: "Generating token types...",
      task: async () => {
        await write("token.gen", generateTokens(sys));
        return "\u2705 Generated token typings";
      }
    },
    {
      title: "Generating system types...",
      task: async () => {
        await write("system.gen", generateSystemTypes(sys));
        return "\u2705 Generated system types";
      }
    }
  ]);
}

export { TypegenCommand };
